name: PR APK Build - Comment Handler

on:
  workflow_run:
    workflows: ["PR APK Build", "PR APK Build with Discord"]
    types:
      - completed

jobs:
  comment:
    name: Comment on PR
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion != 'cancelled'
    permissions:
      pull-requests: write
      statuses: write
      actions: read
    
    steps:
      - name: Check workflow run info
        run: |
          echo "Triggered by workflow: ${{ github.event.workflow_run.name }}"
          echo "Workflow run ID: ${{ github.event.workflow_run.id }}"
          echo "Workflow conclusion: ${{ github.event.workflow_run.conclusion }}"
          echo "Repository: ${{ github.event.workflow_run.repository.full_name }}"
          
      - name: Download build outputs
        id: download-artifacts
        continue-on-error: true
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: ${{ github.event.workflow_run.workflow_id }}
          run_id: ${{ github.event.workflow_run.id }}
          name: build-outputs-${{ github.event.workflow_run.id }}
          
      - name: Check if artifacts were downloaded
        if: steps.download-artifacts.outcome == 'failure'
        run: |
          echo "Failed to download artifacts, checking if this is an old workflow run without artifacts"
          echo "Workflow run was from: ${{ github.event.workflow_run.created_at }}"
          exit 0
          
      - name: Read build outputs
        id: build-info
        run: |
          if [ -f "build-status.txt" ]; then
            BUILD_STATUS=$(cat build-status.txt)
            APK_SIZE=$(cat apk-size.txt)
            PR_NUMBER=$(cat pr-number.txt)
            COMMIT_SHA=$(cat commit-sha.txt)
            WORKFLOW_TYPE=$(cat workflow-type.txt || echo "basic")
            
            echo "build-status=$BUILD_STATUS" >> $GITHUB_OUTPUT
            echo "apk-size=$APK_SIZE" >> $GITHUB_OUTPUT
            echo "pr-number=$PR_NUMBER" >> $GITHUB_OUTPUT
            echo "commit-sha=$COMMIT_SHA" >> $GITHUB_OUTPUT
            echo "workflow-type=$WORKFLOW_TYPE" >> $GITHUB_OUTPUT
          else
            echo "Build outputs not found, assuming build failed"
            echo "build-status=failed" >> $GITHUB_OUTPUT
            echo "workflow-type=basic" >> $GITHUB_OUTPUT
          fi

      - name: Find PR
        id: find-pr
        if: steps.build-info.outputs.pr-number != ''
        uses: actions/github-script@v7
        with:
          script: |
            const pr_number = '${{ steps.build-info.outputs.pr-number }}';
            
            try {
              const { data: pr } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: parseInt(pr_number)
              });
              
              core.setOutput('pr-author', pr.user.login);
              return true;
            } catch (error) {
              console.error(`Failed to find PR #${pr_number}: ${error.message}`);
              return false;
            }

      - name: Comment on PR with build status
        if: steps.build-info.outputs.pr-number != ''
        uses: actions/github-script@v7
        with:
          script: |
            const pr_number = parseInt('${{ steps.build-info.outputs.pr-number }}');
            const build_status = '${{ steps.build-info.outputs.build-status }}';
            const apk_size = '${{ steps.build-info.outputs.apk-size }}';
            const commit_sha = '${{ steps.build-info.outputs.commit-sha }}';
            const pr_author = '${{ steps.find-pr.outputs.pr-author }}';
            const workflow_url = '${{ github.event.workflow_run.html_url }}';
            const short_sha = commit_sha.substring(0, 7);
            const run_number = '${{ github.event.workflow_run.run_number }}';
            const timestamp = new Date().toLocaleString('en-US', { 
              timeZone: 'UTC',
              year: 'numeric',
              month: 'short',
              day: 'numeric',
              hour: '2-digit',
              minute: '2-digit',
              second: '2-digit',
              timeZoneName: 'short'
            });
            
            let comment_body = '';
            
            if (build_status === 'success') {
              comment_body = `## 🚀 APK Build #${run_number} Successful!\n\n` +
                `✅ **Build Status:** Success\n` +
                `📦 **APK Size:** ${apk_size}\n` +
                `🔨 **Commit:** \`${short_sha}\`\n` +
                `👤 **Author:** @${pr_author}\n` +
                `🕒 **Build Time:** ${timestamp}\n\n` +
                `### 📥 Download APK\n` +
                `You can download the APK from the [workflow artifacts](${workflow_url}).\n\n` +
                `**Artifact Name:** \`tetra-pr-${pr_number}-apk\`\n\n` +
                `### 🔧 Testing Instructions\n` +
                `1. Click on the workflow link above\n` +
                `2. Scroll down to the "Artifacts" section\n` +
                `3. Download the APK file\n` +
                `4. Install on your Android device or emulator\n\n` +
                `*Note: The APK will be available for 7 days.*`;
            } else {
              comment_body = `## ❌ APK Build #${run_number} Failed\n\n` +
                `💥 **Build Status:** Failed\n` +
                `🔨 **Commit:** \`${short_sha}\`\n` +
                `👤 **Author:** @${pr_author}\n` +
                `🕒 **Build Time:** ${timestamp}\n\n` +
                `Please check the [build logs](${workflow_url}) for more details.`;
            }
            
            try {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr_number,
                body: comment_body
              });
              console.log(`Successfully commented on PR #${pr_number}`);
            } catch (error) {
              console.error(`Failed to comment on PR: ${error.message}`);
              throw error;
            }

      - name: Update PR status check
        if: steps.build-info.outputs.commit-sha != ''
        uses: actions/github-script@v7
        with:
          script: |
            const build_status = '${{ steps.build-info.outputs.build-status }}';
            const commit_sha = '${{ steps.build-info.outputs.commit-sha }}';
            const workflow_url = '${{ github.event.workflow_run.html_url }}';
            const state = build_status === 'success' ? 'success' : 'failure';
            const description = build_status === 'success' 
              ? 'APK built successfully' 
              : 'APK build failed';
            
            try {
              await github.rest.repos.createCommitStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                sha: commit_sha,
                state: state,
                description: description,
                context: 'APK Build',
                target_url: workflow_url
              });
              console.log(`Successfully updated commit status for ${commit_sha}`);
            } catch (error) {
              console.error(`Failed to update commit status: ${error.message}`);
              throw error;
            }

      # Discord notifications for builds that used the Discord workflow
      - name: Discord Build Completed Notification
        if: |
          (steps.build-info.outputs.workflow-type == 'discord' || contains(github.event.workflow_run.name, 'Discord')) &&
          vars.ENABLE_DISCORD_NOTIFICATIONS == 'true' && 
          secrets.DISCORD_WEBHOOK != ''
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          args: |
            {% raw %}${{ steps.build-info.outputs.build-status == 'success' && '✅' || '❌' }} **PR APK Build ${{ steps.build-info.outputs.build-status == 'success' && 'Successful' || 'Failed' }}!** ${{ steps.build-info.outputs.build-status == 'success' && '✅' || '❌' }}
            
            📋 **PR #${{ steps.build-info.outputs.pr-number }}**
            👤 **Author:** @${{ steps.find-pr.outputs.pr-author }}
            ${{ steps.build-info.outputs.build-status == 'success' && '📦' || '💥' }} **Status:** ${{ steps.build-info.outputs.build-status == 'success' && 'APK Built Successfully' || 'Build Failed' }}
            ${{ steps.build-info.outputs.build-status == 'success' && format('📏 **Size:** {0}', steps.build-info.outputs.apk-size) || '' }}
            🔨 **Commit:** `${{ steps.build-info.outputs.commit-sha }}`
            🕒 **Build #${{ github.event.workflow_run.run_number }}**
            
            🔗 **Workflow:** ${{ github.event.workflow_run.html_url }}
            
            ${{ steps.build-info.outputs.build-status == 'success' && '✨ Comment posted on PR with download instructions!' || 'Please check the build logs for errors! 🔧' }}{% endraw %}